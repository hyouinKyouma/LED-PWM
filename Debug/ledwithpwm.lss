
ledwithpwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000151  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f4  00000000  00000000  000002b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000148  00000000  00000000  000003ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000178  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000067  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000707  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 1000000UL
#include <util/delay.h>
#include <atmega/button.h>

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0x69;
  78:	89 e6       	ldi	r24, 0x69	; 105
  7a:	83 bf       	out	0x33, r24	; 51
	PB3OUT;
  7c:	bb 9a       	sbi	0x17, 3	; 23
	unsigned char ran[]={255,128,75,0};
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	80 e8       	ldi	r24, 0x80	; 128
  84:	8a 83       	std	Y+2, r24	; 0x02
  86:	8b e4       	ldi	r24, 0x4B	; 75
  88:	8b 83       	std	Y+3, r24	; 0x03
  8a:	1c 82       	std	Y+4, r1	; 0x04
    while(1)
    {
		for (char i=0;i<4;i++)
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	20 e0       	ldi	r18, 0x00	; 0
		{
			OCR0=ran[i];
  90:	e1 e0       	ldi	r30, 0x01	; 1
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	ec 0f       	add	r30, r28
  96:	fd 1f       	adc	r31, r29
  98:	e8 0f       	add	r30, r24
  9a:	f1 1d       	adc	r31, r1
  9c:	90 81       	ld	r25, Z
  9e:	9c bf       	out	0x3c, r25	; 60
			PC3ON;
  a0:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	3f e3       	ldi	r19, 0x3F	; 63
  a4:	4d e0       	ldi	r20, 0x0D	; 13
  a6:	93 e0       	ldi	r25, 0x03	; 3
  a8:	31 50       	subi	r19, 0x01	; 1
  aa:	40 40       	sbci	r20, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x3c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
	TCCR0=0x69;
	PB3OUT;
	unsigned char ran[]={255,128,75,0};
    while(1)
    {
		for (char i=0;i<4;i++)
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	84 30       	cpi	r24, 0x04	; 4
  b8:	58 f3       	brcs	.-42     	; 0x90 <main+0x24>
  ba:	82 2f       	mov	r24, r18
  bc:	e9 cf       	rjmp	.-46     	; 0x90 <main+0x24>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
